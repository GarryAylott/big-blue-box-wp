/*!
 * @license MIT
 * @name vlitejs
 * @version 7.4.0
 * @copyright 2025 Yoriiis
 */
const e={},t={};function s({plugins:s,provider:i,type:n,player:r}){(function(s){const i=[],n=Object.keys(e);return s.forEach((s=>{if(!n.includes(s))throw new Error(`vlitejs :: Unknown plugin "${s}".`);i.push({id:s,Plugin:e[s],options:t[s]});})),i})(s).forEach((({id:e,Plugin:t,options:s})=>{const o=new t({player:r,options:s});if(r.plugins[e]=o,!o.providers.includes(i)||!o.types.includes(n))throw new Error(`vlitejs :: The "${e}" plugin is only compatible with providers:"${o.providers}" and types:"${o.types}"`);o.init();}));}const i={html5:function(e){return class extends e{constructor(e){super(e),this.events=[{type:"timeupdate",listener:super.onTimeUpdate},{type:"ended",listener:super.onMediaEnded},{type:"playing",listener:this.onPlaying},{type:"waiting",listener:this.onWaiting},{type:"seeking",listener:this.onSeeking},{type:"seeked",listener:this.onSeeked}];}init(){this.waitUntilVideoIsReady().then((()=>{this.addSpecificEvents(),super.onReady();}));}waitUntilVideoIsReady(){return new window.Promise((e=>{this.media.readyState>=2&&this.media.duration||0===this.media.readyState&&"none"===this.media.preload?e():(this.media.addEventListener("loadedmetadata",e,{once:true}),this.media.addEventListener("canplay",e,{once:true}));}))}addSpecificEvents(){this.events.forEach((e=>{this.media.addEventListener(e.type,e.listener.bind(this));}));}getInstance(){return this.media}getCurrentTime(){return new window.Promise((e=>e(this.media.currentTime)))}getDuration(){return new window.Promise((e=>e(this.media.duration)))}methodPlay(){this.media.play();}methodPause(){this.media.pause();}methodSetVolume(e){this.media.volume=e;}methodGetVolume(){return new window.Promise((e=>e(this.media.volume)))}methodMute(){this.media.muted=true,this.media.setAttribute("muted","");}methodUnMute(){this.media.muted=false,this.media.removeAttribute("muted");}methodSeekTo(e){this.media.currentTime=e;}onWaiting(){this.loading(true);}onPlaying(){this.loading(false);}onSeeking(){this.loading(true);}onSeeked(){this.loading(false);}removeSpecificEvents(){this.events.forEach((e=>{this.media.removeEventListener(e.type,e.listener);}));}destroy(){this.removeSpecificEvents(),super.destroy();}}}},n={};function r(e){const t=1e3*e,s=t/1e3/60|0,i=t/1e3%60|0;let n="";return n+=s<10?"0":"",n+=`${s}:`,n+=i<10?"0":"",n+=i,n}function o(){const e=function(){if(document.exitFullscreen instanceof Function)return "";return ["webkit","moz","ms"].find((e=>document[`${e}ExitFullscreen`]instanceof Function||document[`${e}CancelFullScreen`]instanceof Function))||""}();return {requestFn:e?`${e}RequestFullScreen`:"requestFullscreen",cancelFn:e?`${e}ExitFullscreen`:"exitFullscreen",changeEvent:e?`${e}fullscreenchange`:"fullscreenchange",isFullScreen:e?`${e}FullscreenElement`:"fullscreenElement"}}function l(){return "ontouchstart"in window||navigator.maxTouchPoints>0}function a({target:e,selectorString:t,nodeName:s}){return (s=[].concat(s)).some((s=>e.nodeName.toLowerCase()===s&&e.matches(t)))}var h='<svg class="v-iconPressed" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><path d="M1 11h2v2c0 .55.45 1 1 1s1-.45 1-1v-3c0-.55-.45-1-1-1H1c-.55 0-1 .45-1 1s.45 1 1 1Zm2-8H1c-.55 0-1 .45-1 1s.45 1 1 1h3c.55 0 1-.45 1-1V1c0-.55-.45-1-1-1S3 .45 3 1v2Zm7 11c.55 0 1-.45 1-1v-2h2c.55 0 1-.45 1-1s-.45-1-1-1h-3c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1Zm1-11V1c0-.55-.45-1-1-1S9 .45 9 1v3c0 .55.45 1 1 1h3c.55 0 1-.45 1-1s-.45-1-1-1h-2Z"/></svg>',u='<svg class="v-iconUnpressed" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><path d="M1 9c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1h3c.55 0 1-.45 1-1s-.45-1-1-1H2v-2c0-.55-.45-1-1-1Zm0-4c.55 0 1-.45 1-1V2h2c.55 0 1-.45 1-1s-.45-1-1-1H1C.45 0 0 .45 0 1v3c0 .55.45 1 1 1Zm11 7h-2c-.55 0-1 .45-1 1s.45 1 1 1h3c.55 0 1-.45 1-1v-3c0-.55-.45-1-1-1s-1 .45-1 1v2ZM9 1c0 .55.45 1 1 1h2v2c0 .55.45 1 1 1s1-.45 1-1V1c0-.55-.45-1-1-1h-3c-.55 0-1 .45-1 1Z"/></svg>',c='<svg class="v-iconPressed" viewBox="0 0 12 14" xmlns="http://www.w3.org/2000/svg"><path d="M2 14c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2S0 .9 0 2v10c0 1.1.9 2 2 2ZM8 2v10c0 1.1.9 2 2 2s2-.9 2-2V2c0-1.1-.9-2-2-2S8 .9 8 2Z"/></svg>',d='<svg class="v-iconUnpressed" viewBox="0 0 11 13" xmlns="http://www.w3.org/2000/svg"><path d="M0 1v10.36c0 .79.87 1.27 1.54.84l8.14-5.18a1 1 0 0 0 0-1.69L1.54.16A.998.998 0 0 0 0 1Z"/></svg>',v='<svg class="v-iconUnpressed" viewBox="0 0 18 17" xmlns="http://www.w3.org/2000/svg"><path d="M0 6.461v4c0 .55.45 1 1 1h3l3.29 3.29c.63.63 1.71.18 1.71-.71V2.871c0-.89-1.08-1.34-1.71-.71L4 5.461H1c-.55 0-1 .45-1 1Zm13.5 2a4.5 4.5 0 0 0-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02ZM11 .911v.2c0 .38.25.71.6.85a7.004 7.004 0 0 1 4.4 6.5c0 2.94-1.82 5.47-4.4 6.5-.36.14-.6.47-.6.85v.2c0 .63.63 1.07 1.21.85a8.98 8.98 0 0 0 5.79-8.4c0-3.84-2.4-7.11-5.79-8.4-.58-.23-1.21.22-1.21.85Z"/></svg>',p='<svg class="v-iconPressed" viewBox="0 0 18 18" xmlns="http://www.w3.org/2000/svg"><path d="M.63.292a.996.996 0 0 0 0 1.41l3.66 3.66-.29.3H1c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h3l3.29 3.29c.63.63 1.71.18 1.71-.71v-4.17l4.18 4.18c-.49.37-1.02.68-1.6.91-.36.15-.58.53-.58.92 0 .72.73 1.18 1.39.91.8-.33 1.55-.77 2.22-1.31l1.34 1.34a.997.997 0 1 0 1.41-1.41L2.05.293c-.39-.39-1.02-.39-1.42 0ZM16 8.662c0 .82-.15 1.61-.41 2.34l1.53 1.53c.56-1.17.88-2.48.88-3.87 0-3.83-2.4-7.11-5.78-8.4-.59-.23-1.22.23-1.22.86v.19c0 .38.25.71.61.85 2.57 1.04 4.39 3.56 4.39 6.5Zm-8.71-6.29-.17.17L9 4.422v-1.35c0-.89-1.08-1.33-1.71-.7Zm6.21 6.29a4.5 4.5 0 0 0-2.5-4.03v1.79l2.48 2.48c.01-.08.02-.16.02-.24Z"/></svg>';function m({options:e,isMuted:t,isVideo:s}){return s?`<div class="v-controlBar">${e.playPause?y():""}${e.time?g():""}${e.progressBar?P():""}${e.volume?w({isMuted:t}):""}${e.fullscreen?`<button class="v-fullscreenButton v-controlButton" aria-label="Enter fullscreen">${u}${h}</span></button>`:""}</div>`:`<div class="v-controlBar">${e.playPause?y():""}${e.time?g():""}${e.progressBar?P():""}${e.volume?w({isMuted:t}):""}</div>`}function y(){return `<button class="v-playPauseButton v-controlButton" aria-label="Play">${d}${c}</button>`}function g(){return '<div class="v-time"><span class="v-currentTime">00:00</span>&nbsp;/&nbsp;<span class="v-duration"></span></div>'}function P(){return '<input type="range" class="v-progressBar v-progressBarStyle" min="0" max="100" step="0.01" value="0" aria-label="Seek" aria-valuemin="0" />'}function w({isMuted:e}){return `<button class="v-volumeButton v-controlButton${e?" v-controlPressed":""}">${v}${p}</button>`}class f{constructor({player:e,type:t}){this.player=e,this.type=t,this.touchEvents=["touchstart","touchmove","touchend"],this.onInputProgressBar=this.onInputProgressBar.bind(this),this.onTouchEventProgressBar=this.onTouchEventProgressBar.bind(this),this.onClickOnControlBar=this.onClickOnControlBar.bind(this),this.togglePlayPause=this.togglePlayPause.bind(this),this.toggleVolume=this.toggleVolume.bind(this),this.toggleFullscreen=this.toggleFullscreen.bind(this);}init(){this.render(),this.cacheElements(),this.addEvents();}cacheElements(){const e=this.player.elements.container.querySelector(".v-controlBar");e&&(this.player.elements.controlBar=e,this.player.elements.playPause=e.querySelector(".v-playPauseButton"),this.player.elements.progressBar=e.querySelector(".v-progressBar"),this.player.elements.currentTime=e.querySelector(".v-currentTime"),this.player.elements.duration=e.querySelector(".v-duration"),this.player.elements.volume=e.querySelector(".v-volumeButton"),this.player.elements.fullscreen=e.querySelector(".v-fullscreenButton"),this.player.elements.volume&&this.player.elements.volume.setAttribute("aria-label",this.player.isMuted?"Unmute":"Mute"));}render(){this.player.elements.container.insertAdjacentHTML("beforeend",this.getTemplate());}onReady(){this.player.getDuration().then((e=>{this.player.elements.progressBar&&this.player.elements.progressBar.setAttribute("aria-valuemax",`${Math.round(e)}`),this.player.elements.duration&&(this.player.elements.duration.innerHTML=r(e));}));}addEvents(){var e;this.player.elements.progressBar&&(this.player.elements.progressBar.addEventListener("input",this.onInputProgressBar),this.player.isTouch&&this.touchEvents.forEach((e=>{this.player.elements.progressBar.addEventListener(e,this.onTouchEventProgressBar);}))),null===(e=this.player.elements.controlBar)||void 0===e||e.addEventListener("click",this.onClickOnControlBar);}onTouchEventProgressBar(e){e.preventDefault();const t=e.target,s=Number.parseFloat(t.getAttribute("max")||"100"),i=t.getBoundingClientRect(),n=(e.changedTouches[0].clientX-i.left)/i.width*100;t.value=""+100*n/s,t.dispatchEvent(new Event("input"));}onInputProgressBar(e){const t=e.target;t.style.setProperty("--vlite-progressValue",`${t.value}%`),this.player.elements.outerContainer.classList.contains("v-firstStart")&&this.player.play(),this.player.getDuration().then((e=>{this.player.seekTo(Number.parseFloat(t.value)*e/100);}));}onClickOnControlBar(e){const t=e.target,s=a({target:t,selectorString:".v-playPauseButton",nodeName:["button"]}),i=a({target:t,selectorString:".v-volumeButton",nodeName:["button"]}),n=a({target:t,selectorString:".v-fullscreenButton",nodeName:["button"]});s?this.togglePlayPause(e):i?this.toggleVolume(e):n&&this.toggleFullscreen(e),(s||i||n)&&this.player.elements.container.focus(),this.player.Vlitejs.startAutoHideTimer();}togglePlayPause(e){e.preventDefault(),this.player.elements.outerContainer.classList.contains("v-paused")?this.player.play():this.player.pause();}toggleVolume(e){e.preventDefault(),this.player.elements.volume.classList.contains("v-controlPressed")?this.player.unMute():this.player.mute();}toggleFullscreen(e){if(e.preventDefault(),this.player.isFullScreen)this.isOrientationApiAvailable()&&window.screen.orientation.unlock(),this.player.exitFullscreen();else {this.player.requestFullscreen();try{window.matchMedia("(orientation:portrait)").matches&&this.isOrientationApiAvailable()&&window.screen.orientation.lock("landscape").catch((()=>{}));}catch(e){}}}isOrientationApiAvailable(){return window.screen.orientation&&!window.screen.mozOrientation}getTemplate(){return `${m({options:this.player.options,isMuted:this.player.isMuted,isVideo:"video"===this.type})}`}removeEvents(){var e;this.player.elements.progressBar&&(this.player.elements.progressBar.removeEventListener("input",this.onInputProgressBar),this.player.isTouch&&this.touchEvents.forEach((e=>{this.player.elements.progressBar.removeEventListener(e,this.onTouchEventProgressBar);}))),null===(e=this.player.elements.controlBar)||void 0===e||e.removeEventListener("click",this.onClickOnControlBar);}destroy(){var e;this.removeEvents(),null===(e=this.player.elements.controlBar)||void 0===e||e.remove();}}class E{constructor({Vlitejs:e,type:t}){this.Vlitejs=e,this.type=t,this.plugins={},this.media=e.media,this.options=e.options,this.isCast=false,this.isLinearAd=false,this.elements={container:e.container,outerContainer:e.outerContainer,bigPlay:e.container.querySelector(".v-bigPlay"),poster:e.container.querySelector(".v-poster"),controlBar:null,playPause:null,progressBar:null,currentTime:null,duration:null,volume:null,fullscreen:null},this.isFullScreen=false,this.isMuted=this.options.muted,this.isPaused=null,this.playerEvents=[],this.isTouch=l(),this.controlBar=new f({player:this,type:t});}build(){this.options.controls&&this.controlBar.init(),this.init();}onReady(){this.options.muted&&this.mute(),this.media.classList.add("v-media"),this.media.setAttribute("tabindex","-1"),this.options.autoplay&&(!this.media.muted&&this.mute(),this.play()),this.Vlitejs.onReady instanceof Function&&this.Vlitejs.onReady.call(this,this),"none"===this.media.preload&&"html5"===this.Vlitejs.provider?this.media.addEventListener("loadedmetadata",(()=>this.triggerOnReady())):this.triggerOnReady(),this.loading(false);}triggerOnReady(){this.options.controls&&this.controlBar.onReady(),Object.keys(this.plugins).forEach((e=>{this.plugins[e].onReady instanceof Function&&this.plugins[e].onReady();}));}on(e,t){t instanceof Function&&(this.playerEvents.push({type:e,listener:t}),this.elements.container.addEventListener(e,t));}off(e,t){t instanceof Function&&this.elements.container.removeEventListener(e,t);}dispatchEvent(e,t){this.elements.container.dispatchEvent(new window.CustomEvent(e,{detail:t}));}loading(e){this.elements.outerContainer.classList[e?"add":"remove"]("v-loading"),this.dispatchEvent("progress");}onTimeUpdate(){this.options.time&&Promise.all([this.getCurrentTime(),this.getDuration()]).then((([e,t])=>this.updateProgressBar({seconds:e,duration:t})));}updateProgressBar({seconds:e,duration:t,isRemote:s=false}){const i=Math.round(e);if(this.elements.progressBar){const s=100*i/t;this.elements.progressBar.value=`${s}`,this.elements.progressBar.style.setProperty("--vlite-progressValue",`${s}%`),this.elements.progressBar.setAttribute("aria-valuenow",`${Math.round(e)}`);}this.elements.currentTime&&(this.elements.currentTime.innerHTML=r(i)),!s&&this.dispatchEvent("timeupdate");}onMediaEnded(){this.options.loop?this.play():(this.elements.outerContainer.classList.replace("v-playing","v-paused"),this.elements.outerContainer.classList.add("v-firstStart"),this.isPaused=null),this.elements.poster&&this.elements.poster.classList.add("v-active"),this.elements.progressBar&&(this.elements.progressBar.value="0",this.elements.progressBar.style.setProperty("--vlite-progressValue","0%"),this.elements.progressBar.removeAttribute("aria-valuenow")),this.elements.currentTime&&(this.elements.currentTime.innerHTML="00:00"),this.dispatchEvent("ended");}play(){this.isLinearAd||(null===this.isPaused&&(this.elements.outerContainer.classList.remove("v-firstStart"),"video"===this.type&&this.elements.poster&&this.elements.poster.classList.remove("v-active")),!this.isCast&&this.methodPlay(),this.isPaused=false,this.elements.outerContainer.classList.replace("v-paused","v-playing"),this.elements.playPause&&(this.elements.playPause.setAttribute("aria-label","Pause"),this.elements.playPause.classList.add("v-controlPressed")),"video"===this.type&&this.elements.bigPlay&&this.elements.bigPlay.setAttribute("aria-label","Pause"),this.afterPlayPause(),this.dispatchEvent("play"));}pause(){!this.isCast&&this.methodPause(),this.isPaused=true,this.elements.outerContainer.classList.replace("v-playing","v-paused"),this.elements.playPause&&(this.elements.playPause.setAttribute("aria-label","Play"),this.elements.playPause.classList.remove("v-controlPressed")),"video"===this.type&&this.elements.bigPlay&&this.elements.bigPlay.setAttribute("aria-label","Play"),this.afterPlayPause(),this.dispatchEvent("pause");}afterPlayPause(){this.Vlitejs.autoHideGranted&&(this.Vlitejs.stopAutoHideTimer(),!this.isPaused&&this.Vlitejs.startAutoHideTimer());}setVolume(e){let t=e;t>1?t=1:t<=0?(t=0,this.isMuted=true,this.elements.volume&&this.elements.volume.classList.add("v-controlPressed")):(this.isMuted=false,this.elements.volume&&this.elements.volume.classList.remove("v-controlPressed")),this.methodSetVolume(t),this.dispatchEvent("volumechange",{volume:t});}getVolume(){return new window.Promise((e=>{this.methodGetVolume().then((t=>{e(t);}));}))}mute(){this.methodMute(),this.isMuted=true,this.elements.volume&&(this.elements.volume.classList.add("v-controlPressed"),this.elements.volume.setAttribute("aria-label","Unmute")),this.dispatchEvent("volumechange");}unMute(){this.methodUnMute(),this.isMuted=false,this.elements.volume&&(this.elements.volume.classList.remove("v-controlPressed"),this.elements.volume.setAttribute("aria-label","Mute")),this.dispatchEvent("volumechange");}seekTo(e){this.methodSeekTo(e);}requestFullscreen(){const{requestFn:e}=this.Vlitejs.supportFullScreen;this.media[e]&&(this.elements.container[e](),this.isFullScreen=true,this.elements.outerContainer.classList.add("v-fullscreen"),this.elements.fullscreen&&(this.elements.fullscreen.classList.add("v-controlPressed"),this.elements.fullscreen.setAttribute("aria-label","Exit fullscreen")),this.dispatchEvent("enterfullscreen"));}exitFullscreen({escKey:e=false}={}){const{cancelFn:t}=this.Vlitejs.supportFullScreen;document[t]&&(!e&&document[t](),this.isFullScreen=false,this.elements.outerContainer.classList.remove("v-fullscreen"),this.elements.fullscreen&&(this.elements.fullscreen.classList.remove("v-controlPressed"),this.elements.fullscreen.setAttribute("aria-label","Enter fullscreen")),this.dispatchEvent("exitfullscreen"));}destroy(){var e;null===(e=this.controlBar)||void 0===e||e.destroy(),Object.keys(this.plugins).forEach((e=>{this.plugins[e].destroy instanceof Function&&this.plugins[e].destroy();})),this.playerEvents.forEach((e=>{this.elements.container.removeEventListener(e.type,e.listener);})),this.elements.container.remove();}}const b={audio:{controls:true,autoplay:false,playPause:true,progressBar:true,time:true,volume:true,loop:false},video:{controls:true,autoplay:false,playPause:true,progressBar:true,time:true,volume:true,fullscreen:true,poster:null,bigPlay:true,playsinline:true,loop:false,muted:false,autoHide:false,autoHideDelay:3e3,providerParams:{}}};class B{constructor(e,{options:t={},provider:r="html5",plugins:l=[],onReady:a=()=>{}}={}){if("string"==typeof e)this.media=document.querySelector(e);else {if(!(e instanceof HTMLVideoElement||e instanceof HTMLAudioElement||e instanceof HTMLDivElement))throw new TypeError("vlitejs :: The element or selector supplied is not valid.");this.media=e;}this.provider=r,this.onReady=a,this.type=this.media instanceof HTMLAudioElement?"audio":"video",this.supportFullScreen=o();["autoplay","playsinline","muted","loop"].forEach((e=>{this.media.hasAttribute(e)?t[e]=true:t[e]&&this.media.setAttribute(e,"");})),this.options=Object.assign(Object.assign({},b[this.type]),t),this.autoHideGranted="video"===this.type&&!!this.options.autoHide&&!!this.options.controls,/(iPhone)/gi.test(window.navigator.userAgent)&&(this.options.fullscreen=false),this.onClickOnPlayer=this.onClickOnPlayer.bind(this),this.onDoubleClickOnPlayer=this.onDoubleClickOnPlayer.bind(this),this.onMousemove=this.onMousemove.bind(this),this.onChangeFullScreen=this.onChangeFullScreen.bind(this);const h=function(e,t){const s=i[e];if(s)return s(t,n[e]);throw new Error(`vlitejs :: Unknown provider "${e}"`)}(r,E);this.wrapElement(),this.container=this.media.closest(".v-container"),this.outerContainer=this.container.closest(".v-vlite"),"video"===this.type&&this.renderLayout(),this.player=new h({type:this.type,Vlitejs:this}),this.player.build(),this.addEvents(),s({plugins:l,provider:r,type:this.type,player:this.player});}wrapElement(){const e=document.createElement("div");e.classList.add("v-vlite","v-firstStart","v-paused","v-loading",`v-${this.type}`);const t=document.createElement("div");t.setAttribute("tabindex","0"),t.classList.add("v-container"),e.appendChild(t);this.media.parentNode.insertBefore(e,this.media),t.appendChild(this.media);}renderLayout(){const e=`\n\t\t\t<div class="v-overlay"></div>\n\t\t\t\n\t\t<div class="v-loader">\n\t\t\t<div class="v-loaderContent">\n\t\t\t\t<div class="v-loaderBounce1"></div>\n\t\t\t\t<div class="v-loaderBounce2"></div>\n\t\t\t\t<div class="v-loaderBounce3"></div>\n\t\t\t</div>\n\t\t</div>\n\t\n\t\t\t${this.options.poster?function({posterUrl:e=""}){return `<div class="v-poster v-active"${e&&` style="background-image: url(${e})"`}></div>`}({posterUrl:this.options.poster}):""}\n\t\t\t${this.options.bigPlay?'<button class="v-bigPlay" aria-label="Play"><svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0ZM7.5 12.67V7.33c0-.79.88-1.27 1.54-.84l4.15 2.67a1 1 0 0 1 0 1.68l-4.15 2.67c-.66.43-1.54-.05-1.54-.84Z"/></svg></button>':""}\n\t\t`;this.container.insertAdjacentHTML("beforeend",e);}addEvents(){"video"===this.type&&(this.container.addEventListener("click",this.onClickOnPlayer),this.container.addEventListener("dblclick",this.onDoubleClickOnPlayer),this.autoHideGranted&&this.container.addEventListener("mousemove",this.onMousemove),document.addEventListener(this.supportFullScreen.changeEvent,this.onChangeFullScreen));}onClickOnPlayer(e){const t=e.target,s=a({target:t,selectorString:".v-poster, .v-bigPlay",nodeName:["div","button"]}),i=a({target:t,selectorString:".v-overlay",nodeName:["div"]});(s||i&&!l())&&(this.player.controlBar.togglePlayPause(e),t.matches(".v-bigPlay")&&this.container.focus());}onDoubleClickOnPlayer(e){a({target:e.target,selectorString:".v-overlay",nodeName:["div"]})&&this.player.controlBar.toggleFullscreen(e);}onMousemove(){!this.player.isPaused&&this.autoHideGranted&&(this.stopAutoHideTimer(),this.startAutoHideTimer());}onChangeFullScreen(){!document[this.supportFullScreen.isFullScreen]&&this.player.isFullScreen&&this.player.exitFullscreen({escKey:true});}stopAutoHideTimer(){"video"===this.type&&this.player.elements.controlBar&&(this.player.elements.controlBar.classList.remove("v-hidden"),clearTimeout(this.timerAutoHide));}startAutoHideTimer(){"video"===this.type&&!this.player.isPaused&&this.player.elements.controlBar&&(this.timerAutoHide=window.setTimeout((()=>{var e;null===(e=this.player.elements.controlBar)||void 0===e||e.classList.add("v-hidden");}),this.options.autoHideDelay));}removeEvents(){"video"===this.type&&(this.container.removeEventListener("click",this.onClickOnPlayer),this.container.removeEventListener("dblclick",this.onDoubleClickOnPlayer),this.autoHideGranted&&this.container.removeEventListener("mousemove",this.onMousemove),window.removeEventListener(this.supportFullScreen.changeEvent,this.onChangeFullScreen));}destroy(){this.removeEvents(),this.player.destroy(),this.player.controlBar.destroy();}}B.registerProvider=function(e,t,s){if(void 0!==t){if(!Object.keys(i).includes(e))return i[e]=t,void(s&&(n[e]=s));throw new Error(`vlitejs :: The provider id "${e}" is already registered.`)}throw new Error(`vlitejs :: The provider id "${e}" is undefined.`)},B.registerPlugin=function(s,i,n){if(void 0!==i){if(!Object.keys(e).includes(s))return e[s]=i,void(n&&(t[s]=n));throw new Error(`vlitejs :: The plugin id "${s}" is already registered.`)}throw new Error(`vlitejs :: The plugin id "${s}" is undefined.`)};

/**
 * @license lucide v0.544.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": 2,
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};

/**
 * @license lucide v0.544.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const createSVGElement = ([tag, attrs, children]) => {
  const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
  Object.keys(attrs).forEach((name) => {
    element.setAttribute(name, String(attrs[name]));
  });
  if (children?.length) {
    children.forEach((child) => {
      const childElement = createSVGElement(child);
      element.appendChild(childElement);
    });
  }
  return element;
};
const createElement = (iconNode, customAttrs = {}) => {
  const tag = "svg";
  const attrs = {
    ...defaultAttributes,
    ...customAttrs
  };
  return createSVGElement([tag, attrs, iconNode]);
};

/**
 * @license lucide v0.544.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const getAttrs = (element) => Array.from(element.attributes).reduce((attrs, attr) => {
  attrs[attr.name] = attr.value;
  return attrs;
}, {});
const getClassNames = (attrs) => {
  if (typeof attrs === "string") return attrs;
  if (!attrs || !attrs.class) return "";
  if (attrs.class && typeof attrs.class === "string") {
    return attrs.class.split(" ");
  }
  if (attrs.class && Array.isArray(attrs.class)) {
    return attrs.class;
  }
  return "";
};
const combineClassNames = (arrayOfClassnames) => {
  const classNameArray = arrayOfClassnames.flatMap(getClassNames);
  return classNameArray.map((classItem) => classItem.trim()).filter(Boolean).filter((value, index, self) => self.indexOf(value) === index).join(" ");
};
const toPascalCase = (string) => string.replace(/(\w)(\w*)(_|-|\s*)/g, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase());
const replaceElement = (element, { nameAttr, icons, attrs }) => {
  const iconName = element.getAttribute(nameAttr);
  if (iconName == null) return;
  const ComponentName = toPascalCase(iconName);
  const iconNode = icons[ComponentName];
  if (!iconNode) {
    return console.warn(
      `${element.outerHTML} icon name was not found in the provided icons object.`
    );
  }
  const elementAttrs = getAttrs(element);
  const iconAttrs = {
    ...defaultAttributes,
    "data-lucide": iconName,
    ...attrs,
    ...elementAttrs
  };
  const classNames = combineClassNames(["lucide", `lucide-${iconName}`, elementAttrs, attrs]);
  if (classNames) {
    Object.assign(iconAttrs, {
      class: classNames
    });
  }
  const svgElement = createElement(iconNode, iconAttrs);
  return element.parentNode?.replaceChild(svgElement, element);
};

/**
 * @license lucide v0.544.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const createIcons = ({
  icons = {},
  nameAttr = "data-lucide",
  attrs = {},
  root = document
} = {}) => {
  if (!Object.values(icons).length) {
    throw new Error(
      "Please provide an icons object.\nIf you want to use all the icons you can import it like:\n `import { createIcons, icons } from 'lucide';\nlucide.createIcons({icons});`"
    );
  }
  if (typeof root === "undefined") {
    throw new Error("`createIcons()` only works in a browser environment.");
  }
  const elementsToReplace = root.querySelectorAll(`[${nameAttr}]`);
  Array.from(elementsToReplace).forEach(
    (element) => replaceElement(element, { nameAttr, icons, attrs })
  );
  if (nameAttr === "data-lucide") {
    const deprecatedElements = root.querySelectorAll("[icon-name]");
    if (deprecatedElements.length > 0) {
      console.warn(
        "[Lucide] Some icons were found with the now deprecated icon-name attribute. These will still be replaced for backwards compatibility, but will no longer be supported in v1.0 and you should switch to data-lucide"
      );
      Array.from(deprecatedElements).forEach(
        (element) => replaceElement(element, { nameAttr: "icon-name", icons, attrs })
      );
    }
  }
};

// Lucide setup
let icons = {};

document.addEventListener("DOMContentLoaded", () => {
    if (Object.keys(icons).length > 0) {
        // Production: only registered icons
        createIcons({ icons });
    } else {
        // Development: load all icons
        createIcons();
    }
});

// Configuration object
const CONFIG = {
    FADE_DISTANCE: 900,
    SCROLL_ANIMATION_DELAY: 100,
    SELECTORS: {
        nav: ".nav",
        navToggle: ".menu-nav-toggle",
        bgImage: ".hero-bg-image img",
        searchIcon: ".nav-search-icon",
        searchOverlay: "#searchOverlay",
        podcastMenu: ".pod-links-menu details",
        scrollContainer: ".posts-hori-scroll",
        suggestedPosts: ".suggested-posts",
        categorySwitcher: ".switch-btn",
    },
};

// Cache DOM elements
const elements = {
    primaryNav: document.querySelector(CONFIG.SELECTORS.nav),
    navToggle: document.querySelector(CONFIG.SELECTORS.navToggle),
};

// Navigation toggle
const initNavigation = () => {
    elements.navToggle?.addEventListener("click", () => {
        const isVisible = elements.primaryNav?.dataset.visible === "true";
        elements.primaryNav?.setAttribute("data-visible", String(!isVisible));
        elements.navToggle?.setAttribute("aria-expanded", String(!isVisible));
    });
};

// Background fade
const initBackgroundFade = () => {
    const backgroundImage = document.querySelector(CONFIG.SELECTORS.bgImage);
    if (!backgroundImage) return;

    let ticking = false;
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                const scrollHandler = () => {
                    if (!ticking) {
                        requestAnimationFrame(() => {
                            const opacity = Math.max(
                                1 - window.scrollY / CONFIG.FADE_DISTANCE,
                                0
                            );
                            backgroundImage.style.opacity = opacity;
                            ticking = false;
                        });
                        ticking = true;
                    }
                };
                scrollHandler(); // Set initial opacity
                window.addEventListener("scroll", scrollHandler, {
                    passive: true,
                });
            }
        });
    });
    observer.observe(backgroundImage);
};

// Search functionality
const initSearch = () => {
    const searchIcon = document.querySelector(CONFIG.SELECTORS.searchIcon);
    const searchOverlay = document.querySelector(
        CONFIG.SELECTORS.searchOverlay
    );
    if (!searchIcon || !searchOverlay) return;

    const closeOverlay = () => {
        const searchField = document.querySelector("#search-field");
        if (searchField && document.activeElement === searchField) {
            searchField.blur(); // ✅ Blur before hiding to prevent aria-hidden focus warning
        }

        searchOverlay.setAttribute("aria-hidden", "true");
        document.body.classList.remove("overlay-active");
    };

    searchIcon.addEventListener("click", (e) => {
        e.preventDefault();
        searchOverlay.setAttribute("aria-hidden", "false");
        document.body.classList.add("overlay-active");
        const searchField = document.querySelector("#search-field");
        if (searchField) searchField.focus(); // ✅ Only after aria-hidden is false
    });

    searchOverlay.addEventListener("click", ({ target }) => {
        if (target === searchOverlay) closeOverlay();
    });

    document.addEventListener("keydown", ({ key }) => {
        if (
            key === "Escape" &&
            searchOverlay.getAttribute("aria-hidden") === "false"
        ) {
            closeOverlay();
        }
    });
};

// Podcast links menu
const initPodcastMenu = () => {
    const podLinksDetails = document.querySelector(
        CONFIG.SELECTORS.podcastMenu
    );
    if (!podLinksDetails) return;

    const closeHandler = ({ target }) => {
        if (podLinksDetails.open && !podLinksDetails.contains(target)) {
            podLinksDetails.open = false;
        }
    };

    document.addEventListener("click", closeHandler, { passive: true });
};

// Scroll containers
const initScrollContainers = () => {
    const scrollContainers = document.querySelectorAll(
        CONFIG.SELECTORS.scrollContainer
    );
    if (!scrollContainers.length) return;

    // Create a Map to store container-specific update functions
    const updateFunctions = new Map();

    scrollContainers.forEach((container) => {
        const header = container
            .closest(CONFIG.SELECTORS.suggestedPosts)
            ?.querySelector(".suggested-posts-header");
        if (!header) return;

        const leftBtn = header.querySelector(".scroll-left");
        const rightBtn = header.querySelector(".scroll-right");
        const scrollAmount =
            container.querySelector("article")?.offsetWidth ?? 0 + 16;

        const updateButtonStates = () => {
            const maxScroll = container.scrollWidth - container.clientWidth;
            leftBtn.disabled = container.scrollLeft <= 0;
            rightBtn.disabled = container.scrollLeft >= maxScroll - 1;
        };

        // Store the update function in the Map
        updateFunctions.set(container, updateButtonStates);

        const scrollHandler = (direction) => {
            container.scrollBy({
                left: direction * scrollAmount,
                behavior: "smooth",
            });
            setTimeout(updateButtonStates, CONFIG.SCROLL_ANIMATION_DELAY);
        };

        leftBtn?.addEventListener("click", () => scrollHandler(-1));
        rightBtn?.addEventListener("click", () => scrollHandler(1));
        container.addEventListener("scroll", updateButtonStates, {
            passive: true,
        });

        updateButtonStates();
    });

    // Create ResizeObserver after the functions are defined
    const resizeObserver = new ResizeObserver((entries) => {
        entries.forEach((entry) => {
            const container = entry.target;
            const updateFn = updateFunctions.get(container);
            if (updateFn) {
                updateFn();
            }
        });
    });

    // Observe all containers
    scrollContainers.forEach((container) => {
        resizeObserver.observe(container);
    });
};

// Add external link icons
const initExternalLinkIcons = () => {
    const links = document.querySelectorAll(
        'a[target="_blank"]:not(.has-external-icon)'
    );
    themeSettings.themeUrl || "";

    links.forEach((link) => {
        // Create <span> element for the icon
        const icon = document.createElement("span");
        icon.innerHTML = `<svg width="16" height="16" viewBox="0 0 16 16" class="external-link-icon">
            <path d="M13 3L3 13M13 3H4M13 3V12" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>`;

        // Append icon and mark as processed
        link.appendChild(icon);
        link.classList.add("has-external-icon");
    });
};

// Tardis icon scroll progress
const initTardisScrollProgress = () => {
    const container = document.querySelector(".tardis-progress-container");
    const fillRect = document.getElementById("tardis-fill");
    const statusText = document.getElementById("tardisProgressStatus");
    const featuredImage = document.querySelector(".post-featured-image");
    const article = document.querySelector(".post-article");
    document.querySelector("#comments");

    if (!container || !fillRect || !statusText || !article) {
        return;
    }

    const showAfter = featuredImage?.offsetHeight || 100;
    const fillHeight = 864; // Match SVG height
    let ticking = false;

    const updateProgress = () => {
        const scrollY = window.scrollY || window.pageYOffset;

        // Calculate article end position
        const articleEnd = article.offsetTop + article.offsetHeight;
        const viewportHeight = window.innerHeight;
        const scrollDistance = articleEnd - viewportHeight;

        // Add offset to ensure fill completes exactly at article end
        const progress = Math.min(scrollY / (scrollDistance + 100), 1);
        const percent = Math.round(progress * 100);

        // Show/hide logic
        if (
            scrollY > showAfter &&
            scrollY < scrollDistance + viewportHeight + -700
        ) {
            container.classList.add("visible");
        } else {
            container.classList.remove("visible");
        }

        // Move the blue fill up
        const translateY = fillHeight * (1 - progress);
        fillRect.setAttribute("y", translateY);

        // Update screen reader text
        statusText.textContent = `Reading progress: ${percent}%`;

        ticking = false;
    };

    const onScroll = () => {
        if (!ticking) {
            requestAnimationFrame(updateProgress);
            ticking = true;
        }
    };

    window.addEventListener("scroll", onScroll, { passive: true });
    window.addEventListener("resize", onScroll, { passive: true });
    updateProgress(); // initial state
};

// AJAX request for category switcher
const initCategorySwitcher = () => {
    // Only enable on homepage or a specific template, NOT search results
    if (document.body.matches(".search-results, .search-no-results")) return;

    const switchButtons = document.querySelectorAll(
        CONFIG.SELECTORS.categorySwitcher
    );
    const postContainer = document.getElementById("ajax-posts-container");
    if (!switchButtons.length || !postContainer) return;

    let requestCounter = 0;

    const setButtonsDisabled = (disabled) => {
        switchButtons.forEach((btn) => {
            btn.disabled = disabled;
        });
    };

    const beginLoading = () => {
        postContainer.setAttribute("aria-busy", "true");
    };

    const endLoading = () => {
        postContainer.removeAttribute("aria-busy");
    };

    const fetchCategoryPosts = (category) => {
        const reqId = ++requestCounter;

        // Disable controls and mark busy (no pre-fade-out)
        setButtonsDisabled(true);
        beginLoading();

        // Only for homepage/archive, so no search stuff
        const params = {
            action: "filter_posts_by_category",
            category: category,
            context: "home",
        };

        fetch(themeSettings.ajaxUrl, {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: new URLSearchParams(params),
        })
            .then((res) => res.text())
            .then((html) => {
                // Ignore stale responses from earlier clicks
                if (reqId !== requestCounter) return;

                // Swap content, then run entry-only animation
                postContainer.innerHTML = html;

                // Setup initial hidden state for children, then activate transition
                postContainer.classList.add("enter-setup");
                // Force reflow to commit styles
                void postContainer.offsetHeight;
                postContainer.classList.remove("enter-setup");
                postContainer.classList.add("enter-active");

                // Clean up after animation window
                setTimeout(() => {
                    postContainer.classList.remove("enter-active");
                }, 260);

                endLoading();
                setButtonsDisabled(false);
            })
            .catch((err) => {
                console.error("Category switch AJAX error:", err);
                endLoading();
                setButtonsDisabled(false);
            });
    };

    switchButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
            e.preventDefault();
            const category = button.dataset.category;

            switchButtons.forEach((btn) => {
                btn.setAttribute("aria-pressed", "false");
                btn.classList.remove("is-active");
            });

            button.setAttribute("aria-pressed", "true");
            button.classList.add("is-active");

            fetchCategoryPosts(category);
        });
    });
};

// Rotating sentences in footer
const initRotatingSentence = () => {
    const container = document.querySelector(".rotating-sentence");
    if (!container) return;

    const dynamicSpan = container.querySelector(".rotating-sentence__dynamic");
    if (!dynamicSpan) return;

    let phrases;
    try {
        phrases = JSON.parse(container.dataset.phrases);
    } catch (err) {
        console.error("Invalid phrases JSON:", err);
        return;
    }

    if (!Array.isArray(phrases) || phrases.length < 2) return;

    let index = 0;

    // Show first phrase immediately
    dynamicSpan.textContent = phrases[index];
    dynamicSpan.classList.add("visible");
    index = 1;

    const rotateText = () => {
        dynamicSpan.classList.remove("visible");

        setTimeout(() => {
            dynamicSpan.textContent = phrases[index];
            dynamicSpan.classList.add("visible");
            index = (index + 1) % phrases.length;
        }, 250);
    };

    setInterval(rotateText, 5000);
};

// Audio player
const initAudioPlayer = () => {
    const waitForPlayer = setInterval(() => {
        const audioPlayer = document.querySelector("#player");

        if (audioPlayer && typeof B !== "undefined") {
            console.log("🎧 Initializing vLite…");

            new B("#player", {
                controls: [
                    "play",
                    "current-time",
                    "progress",
                    "duration",
                    "volume",
                ],
                volume: true,
                autoplay: false,
            });

            clearInterval(waitForPlayer);
        }
    }, 100); // Check every 100ms
};

// Smooth scroll + focus for the reviews compendium era jump dropdown
const initEraJumpDropdown = () => {
    const sel = document.getElementById("era-jump");
    if (!sel) return;
    sel.addEventListener("change", function () {
        const hash = this.value;
        if (!hash || !hash.startsWith("#")) return;

        // Use native anchor navigation (CSS handles smooth scroll)
        window.location.hash = hash;

        // After the browser scrolls, move focus for accessibility
        requestAnimationFrame(() => {
            const target = document.getElementById(hash.slice(1));
            if (!target) return;
            const heading = target.querySelector("h2, .table-heading");
            const focusEl = heading || target;
            focusEl.setAttribute("tabindex", "-1");
            focusEl.focus({ preventScroll: true });
            setTimeout(() => focusEl.removeAttribute("tabindex"), 150);
        });

        // Reset dropdown back to placeholder
        this.selectedIndex = 0;
    });
};

// Initialize all features
const init = () => {
    initNavigation();
    initBackgroundFade();
    initSearch();
    initPodcastMenu();
    initScrollContainers();
    initExternalLinkIcons();
    initTardisScrollProgress();
    initCategorySwitcher();
    initRotatingSentence();
    initEraJumpDropdown();
    window.addEventListener("DOMContentLoaded", initAudioPlayer);
};

// Start when DOM is ready
if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
} else {
    init();
}
//# sourceMappingURL=bbb-scripts.js.map
