{"version":3,"file":"bbb-scripts.min.js","names":["CONFIG","FADE_DISTANCE","SCROLL_ANIMATION_DELAY","SELECTORS","nav","navToggle","bgImage","searchIcon","searchOverlay","podcastMenu","scrollContainer","suggestedPosts","categorySwitcher","elements","primaryNav","document","querySelector","initNavigation","addEventListener","isVisible","dataset","visible","setAttribute","String","initBackgroundFade","backgroundImage","ticking","IntersectionObserver","entries","forEach","entry","isIntersecting","scrollHandler","requestAnimationFrame","opacity","Math","max","window","scrollY","style","passive","observe","initSearch","closeOverlay","searchField","activeElement","blur","body","classList","remove","e","preventDefault","add","focus","target","key","getAttribute","initPodcastMenu","podLinksDetails","open","contains","initScrollContainers","scrollContainers","querySelectorAll","length","updateFunctions","Map","container","header","closest","leftBtn","rightBtn","scrollAmount","offsetWidth","updateButtonStates","maxScroll","scrollWidth","clientWidth","disabled","scrollLeft","set","direction","scrollBy","left","behavior","setTimeout","resizeObserver","ResizeObserver","updateFn","get","initExternalLinkIcons","links","themeSettings","themeUrl","link","icon","createElement","innerHTML","appendChild","initTardisScrollProgress","fillRect","getElementById","statusText","featuredImage","article","showAfter","offsetHeight","updateProgress","pageYOffset","articleEnd","offsetTop","viewportHeight","innerHeight","scrollDistance","progress","min","percent","round","translateY","textContent","onScroll","initCategorySwitcher","switchButtons","postContainer","button","category","btn","fetch","ajaxUrl","method","headers","URLSearchParams","action","then","res","text","html","catch","err","console","error","fetchCategoryPosts","init","readyState"],"sources":["bbb-scripts.js"],"mappings":"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","ignoreList":[],"sourcesContent":["// Configuration object\nconst CONFIG = {\n    FADE_DISTANCE: 900,\n    SCROLL_ANIMATION_DELAY: 100,\n    SELECTORS: {\n        nav: \".nav\",\n        navToggle: \".menu-nav-toggle\",\n        bgImage: \".hero-bg-image img\",\n        searchIcon: \".nav-search-icon\",\n        searchOverlay: \"#searchOverlay\",\n        podcastMenu: \".pod-links-menu details\",\n        scrollContainer: \".posts-hori-scroll\",\n        suggestedPosts: \".suggested-posts\",\n        categorySwitcher: \".switch-btn\",\n    },\n};\n\n// Cache DOM elements\nconst elements = {\n    primaryNav: document.querySelector(CONFIG.SELECTORS.nav),\n    navToggle: document.querySelector(CONFIG.SELECTORS.navToggle),\n};\n\n// Navigation toggle\nconst initNavigation = () => {\n    elements.navToggle?.addEventListener(\"click\", () => {\n        const isVisible = elements.primaryNav?.dataset.visible === \"true\";\n        elements.primaryNav?.setAttribute(\"data-visible\", String(!isVisible));\n        elements.navToggle?.setAttribute(\"aria-expanded\", String(!isVisible));\n    });\n};\n\n// Background fade\nconst initBackgroundFade = () => {\n    const backgroundImage = document.querySelector(CONFIG.SELECTORS.bgImage);\n    if (!backgroundImage) return;\n\n    let ticking = false;\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n                const scrollHandler = () => {\n                    if (!ticking) {\n                        requestAnimationFrame(() => {\n                            const opacity = Math.max(\n                                1 - window.scrollY / CONFIG.FADE_DISTANCE,\n                                0\n                            );\n                            backgroundImage.style.opacity = opacity;\n                            ticking = false;\n                        });\n                        ticking = true;\n                    }\n                };\n                scrollHandler(); // Set initial opacity\n                window.addEventListener(\"scroll\", scrollHandler, {\n                    passive: true,\n                });\n            }\n        });\n    });\n    observer.observe(backgroundImage);\n};\n\n// Search functionality\nconst initSearch = () => {\n    const searchIcon = document.querySelector(CONFIG.SELECTORS.searchIcon);\n    const searchOverlay = document.querySelector(\n        CONFIG.SELECTORS.searchOverlay\n    );\n    if (!searchIcon || !searchOverlay) return;\n\n    const closeOverlay = () => {\n        const searchField = document.querySelector(\"#search-field\");\n        if (searchField && document.activeElement === searchField) {\n            searchField.blur(); // ✅ Blur before hiding to prevent aria-hidden focus warning\n        }\n\n        searchOverlay.setAttribute(\"aria-hidden\", \"true\");\n        document.body.classList.remove(\"overlay-active\");\n    };\n\n    searchIcon.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        searchOverlay.setAttribute(\"aria-hidden\", \"false\");\n        document.body.classList.add(\"overlay-active\");\n\n        const searchField = document.querySelector(\"#search-field\");\n        if (searchField) searchField.focus(); // ✅ Only after aria-hidden is false\n    });\n\n    searchOverlay.addEventListener(\"click\", ({ target }) => {\n        if (target === searchOverlay) closeOverlay();\n    });\n\n    document.addEventListener(\"keydown\", ({ key }) => {\n        if (\n            key === \"Escape\" &&\n            searchOverlay.getAttribute(\"aria-hidden\") === \"false\"\n        ) {\n            closeOverlay();\n        }\n    });\n};\n\n// Podcast links menu\nconst initPodcastMenu = () => {\n    const podLinksDetails = document.querySelector(\n        CONFIG.SELECTORS.podcastMenu\n    );\n    if (!podLinksDetails) return;\n\n    const closeHandler = ({ target }) => {\n        if (podLinksDetails.open && !podLinksDetails.contains(target)) {\n            podLinksDetails.open = false;\n        }\n    };\n\n    document.addEventListener(\"click\", closeHandler, { passive: true });\n};\n\n// Scroll containers\nconst initScrollContainers = () => {\n    const scrollContainers = document.querySelectorAll(\n        CONFIG.SELECTORS.scrollContainer\n    );\n    if (!scrollContainers.length) return;\n\n    // Create a Map to store container-specific update functions\n    const updateFunctions = new Map();\n\n    scrollContainers.forEach((container) => {\n        const header = container\n            .closest(CONFIG.SELECTORS.suggestedPosts)\n            ?.querySelector(\".suggested-posts-header\");\n        if (!header) return;\n\n        const leftBtn = header.querySelector(\".scroll-left\");\n        const rightBtn = header.querySelector(\".scroll-right\");\n        const scrollAmount =\n            container.querySelector(\"article\")?.offsetWidth ?? 0 + 16;\n\n        const updateButtonStates = () => {\n            const maxScroll = container.scrollWidth - container.clientWidth;\n            leftBtn.disabled = container.scrollLeft <= 0;\n            rightBtn.disabled = container.scrollLeft >= maxScroll - 1;\n        };\n\n        // Store the update function in the Map\n        updateFunctions.set(container, updateButtonStates);\n\n        const scrollHandler = (direction) => {\n            container.scrollBy({\n                left: direction * scrollAmount,\n                behavior: \"smooth\",\n            });\n            setTimeout(updateButtonStates, CONFIG.SCROLL_ANIMATION_DELAY);\n        };\n\n        leftBtn?.addEventListener(\"click\", () => scrollHandler(-1));\n        rightBtn?.addEventListener(\"click\", () => scrollHandler(1));\n        container.addEventListener(\"scroll\", updateButtonStates, {\n            passive: true,\n        });\n\n        updateButtonStates();\n    });\n\n    // Create ResizeObserver after the functions are defined\n    const resizeObserver = new ResizeObserver((entries) => {\n        entries.forEach((entry) => {\n            const container = entry.target;\n            const updateFn = updateFunctions.get(container);\n            if (updateFn) {\n                updateFn();\n            }\n        });\n    });\n\n    // Observe all containers\n    scrollContainers.forEach((container) => {\n        resizeObserver.observe(container);\n    });\n};\n\n// Add external link icons\nconst initExternalLinkIcons = () => {\n    const links = document.querySelectorAll(\n        'a[target=\"_blank\"]:not(.has-external-icon)'\n    );\n    const themeUrl = themeSettings.themeUrl || \"\";\n\n    links.forEach((link) => {\n        // Create <span> element for the icon\n        const icon = document.createElement(\"span\");\n        icon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"external-link-icon\">\n            <path d=\"M13 3L3 13M13 3H4M13 3V12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>`;\n\n        // Append icon and mark as processed\n        link.appendChild(icon);\n        link.classList.add(\"has-external-icon\");\n    });\n};\n\n// Tardis icon scroll progress\nconst initTardisScrollProgress = () => {\n    const container = document.querySelector(\".tardis-progress-container\");\n    const fillRect = document.getElementById(\"tardis-fill\");\n    const statusText = document.getElementById(\"tardisProgressStatus\");\n    const featuredImage = document.querySelector(\".post-featured-image\");\n    const article = document.querySelector(\".post-article\");\n    const comments = document.querySelector(\"#comments\");\n\n    if (!container || !fillRect || !statusText || !article) {\n        return;\n    }\n\n    const showAfter = featuredImage?.offsetHeight || 100;\n    const fillHeight = 864; // Match SVG height\n    let ticking = false;\n\n    const updateProgress = () => {\n        const scrollY = window.scrollY || window.pageYOffset;\n\n        // Calculate article end position\n        const articleEnd = article.offsetTop + article.offsetHeight;\n        const viewportHeight = window.innerHeight;\n        const scrollDistance = articleEnd - viewportHeight;\n\n        // Add offset to ensure fill completes exactly at article end\n        const progress = Math.min(scrollY / (scrollDistance + 100), 1);\n        const percent = Math.round(progress * 100);\n\n        // Show/hide logic\n        if (\n            scrollY > showAfter &&\n            scrollY < scrollDistance + viewportHeight + -700\n        ) {\n            container.classList.add(\"visible\");\n        } else {\n            container.classList.remove(\"visible\");\n        }\n\n        // Move the blue fill up\n        const translateY = fillHeight * (1 - progress);\n        fillRect.setAttribute(\"y\", translateY);\n\n        // Update screen reader text\n        statusText.textContent = `Reading progress: ${percent}%`;\n\n        ticking = false;\n    };\n\n    const onScroll = () => {\n        if (!ticking) {\n            requestAnimationFrame(updateProgress);\n            ticking = true;\n        }\n    };\n\n    window.addEventListener(\"scroll\", onScroll, { passive: true });\n    window.addEventListener(\"resize\", onScroll, { passive: true });\n    updateProgress(); // initial state\n};\n\n// AJAX request for category switcher\nconst initCategorySwitcher = () => {\n    const switchButtons = document.querySelectorAll(\n        CONFIG.SELECTORS.categorySwitcher\n    );\n    const postContainer = document.getElementById(\"ajax-posts-container\");\n    if (!switchButtons.length || !postContainer) return;\n\n    const fetchCategoryPosts = (category) => {\n        fetch(themeSettings.ajaxUrl, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n            body: new URLSearchParams({\n                action: \"filter_posts_by_category\",\n                category: category,\n            }),\n        })\n            .then((res) => res.text())\n            .then((html) => {\n                postContainer.innerHTML = html;\n            })\n            .catch((err) => console.error(\"Category switch AJAX error:\", err));\n    };\n\n    switchButtons.forEach((button) => {\n        button.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const category = button.dataset.category;\n\n            // Update aria-pressed and .is-active for all buttons\n            switchButtons.forEach((btn) => {\n                btn.setAttribute(\"aria-pressed\", \"false\");\n                btn.classList.remove(\"is-active\");\n            });\n\n            button.setAttribute(\"aria-pressed\", \"true\");\n            button.classList.add(\"is-active\");\n\n            fetchCategoryPosts(category);\n        });\n    });\n};\n\n// Initialize all features\nconst init = () => {\n    initNavigation();\n    initBackgroundFade();\n    initSearch();\n    initPodcastMenu();\n    initScrollContainers();\n    initExternalLinkIcons();\n    initTardisScrollProgress();\n    initCategorySwitcher();\n};\n\n// Start when DOM is ready\nif (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", init);\n} else {\n    init();\n}\n"]}