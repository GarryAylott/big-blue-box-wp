{"version":3,"file":"bbb-scripts.min.js","names":["CONFIG","FADE_DISTANCE","SCROLL_ANIMATION_DELAY","SELECTORS","nav","navToggle","bgImage","searchIcon","searchOverlay","podcastMenu","scrollContainer","suggestedPosts","elements","primaryNav","document","querySelector","initNavigation","addEventListener","isVisible","dataset","visible","setAttribute","String","initBackgroundFade","backgroundImage","ticking","IntersectionObserver","entries","forEach","entry","isIntersecting","scrollHandler","requestAnimationFrame","opacity","Math","max","window","scrollY","style","passive","observe","initSearch","closeOverlay","body","classList","remove","e","preventDefault","add","target","key","getAttribute","initPodcastMenu","podLinksDetails","open","contains","initScrollContainers","scrollContainers","querySelectorAll","length","updateFunctions","Map","container","header","closest","leftBtn","rightBtn","scrollAmount","offsetWidth","updateButtonStates","maxScroll","scrollWidth","clientWidth","disabled","scrollLeft","set","direction","scrollBy","left","behavior","setTimeout","resizeObserver","ResizeObserver","updateFn","get","initExternalLinkIcons","links","themeUrl","link","icon","createElement","innerHTML","appendChild","initTardisScrollProgress","fillRect","getElementById","statusText","featuredImage","article","showAfter","offsetHeight","updateProgress","pageYOffset","articleEnd","offsetTop","viewportHeight","innerHeight","scrollDistance","progress","min","percent","round","translateY","textContent","onScroll","init","readyState"],"sources":["bbb-scripts.js"],"mappings":"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","ignoreList":[],"sourcesContent":["// Configuration object\nconst CONFIG = {\n    FADE_DISTANCE: 900,\n    SCROLL_ANIMATION_DELAY: 100,\n    SELECTORS: {\n        nav: '.nav',\n        navToggle: '.menu-nav-toggle',\n        bgImage: '.bg-image-fade img',\n        searchIcon: '.nav-search-icon',\n        searchOverlay: '#searchOverlay',\n        podcastMenu: '.pod-links-menu details',\n        scrollContainer: '.posts-hori-scroll',\n        suggestedPosts: '.suggested-posts'\n    }\n};\n\n// Cache DOM elements\nconst elements = {\n    primaryNav: document.querySelector(CONFIG.SELECTORS.nav),\n    navToggle: document.querySelector(CONFIG.SELECTORS.navToggle)\n};\n\n// Navigation toggle\nconst initNavigation = () => {\n    elements.navToggle?.addEventListener('click', () => {\n        const isVisible = elements.primaryNav?.dataset.visible === 'true';\n        elements.primaryNav?.setAttribute('data-visible', String(!isVisible));\n        elements.navToggle?.setAttribute('aria-expanded', String(!isVisible));\n    });\n};\n\n// Background fade\nconst initBackgroundFade = () => {\n    const backgroundImage = document.querySelector(CONFIG.SELECTORS.bgImage);\n    if (!backgroundImage) return;\n\n    let ticking = false;\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                const scrollHandler = () => {\n                    if (!ticking) {\n                        requestAnimationFrame(() => {\n                            const opacity = Math.max(1 - (window.scrollY / CONFIG.FADE_DISTANCE), 0);\n                            backgroundImage.style.opacity = opacity;\n                            ticking = false;\n                        });\n                        ticking = true;\n                    }\n                };\n                scrollHandler(); // Set initial opacity\n                window.addEventListener('scroll', scrollHandler, { passive: true });\n            }\n        });\n    });\n    observer.observe(backgroundImage);\n};\n\n// Search functionality\nconst initSearch = () => {\n    const searchIcon = document.querySelector(CONFIG.SELECTORS.searchIcon);\n    const searchOverlay = document.querySelector(CONFIG.SELECTORS.searchOverlay);\n    if (!searchIcon || !searchOverlay) return;\n\n    const closeOverlay = () => {\n        searchOverlay.setAttribute('aria-hidden', 'true');\n        document.body.classList.remove('overlay-active');\n    };\n\n    searchIcon.addEventListener('click', (e) => {\n        e.preventDefault();\n        searchOverlay.setAttribute('aria-hidden', 'false');\n        document.body.classList.add('overlay-active');\n    });\n\n    searchOverlay.addEventListener('click', ({ target }) => {\n        if (target === searchOverlay) closeOverlay();\n    });\n\n    document.addEventListener('keydown', ({ key }) => {\n        if (key === 'Escape' && searchOverlay.getAttribute('aria-hidden') === 'false') {\n            closeOverlay();\n        }\n    });\n};\n\n// Podcast links menu\nconst initPodcastMenu = () => {\n    const podLinksDetails = document.querySelector(CONFIG.SELECTORS.podcastMenu);\n    if (!podLinksDetails) return;\n\n    const closeHandler = ({ target }) => {\n        if (podLinksDetails.open && !podLinksDetails.contains(target)) {\n            podLinksDetails.open = false;\n        }\n    };\n\n    document.addEventListener('click', closeHandler, { passive: true });\n};\n\n// Scroll containers\nconst initScrollContainers = () => {\n    const scrollContainers = document.querySelectorAll(CONFIG.SELECTORS.scrollContainer);\n    if (!scrollContainers.length) return;\n\n    // Create a Map to store container-specific update functions\n    const updateFunctions = new Map();\n\n    scrollContainers.forEach(container => {\n        const header = container.closest(CONFIG.SELECTORS.suggestedPosts)\n            ?.querySelector('.suggested-posts-header');\n        if (!header) return;\n\n        const leftBtn = header.querySelector('.scroll-left');\n        const rightBtn = header.querySelector('.scroll-right');\n        const scrollAmount = container.querySelector('article')?.offsetWidth ?? 0 + 16;\n\n        const updateButtonStates = () => {\n            const maxScroll = container.scrollWidth - container.clientWidth;\n            leftBtn.disabled = container.scrollLeft <= 0;\n            rightBtn.disabled = container.scrollLeft >= maxScroll - 1;\n        };\n\n        // Store the update function in the Map\n        updateFunctions.set(container, updateButtonStates);\n\n        const scrollHandler = (direction) => {\n            container.scrollBy({\n                left: direction * scrollAmount,\n                behavior: 'smooth'\n            });\n            setTimeout(updateButtonStates, CONFIG.SCROLL_ANIMATION_DELAY);\n        };\n\n        leftBtn?.addEventListener('click', () => scrollHandler(-1));\n        rightBtn?.addEventListener('click', () => scrollHandler(1));\n        container.addEventListener('scroll', updateButtonStates, { passive: true });\n        \n        updateButtonStates();\n    });\n\n    // Create ResizeObserver after the functions are defined\n    const resizeObserver = new ResizeObserver(entries => {\n        entries.forEach(entry => {\n            const container = entry.target;\n            const updateFn = updateFunctions.get(container);\n            if (updateFn) {\n                updateFn();\n            }\n        });\n    });\n\n    // Observe all containers\n    scrollContainers.forEach(container => {\n        resizeObserver.observe(container);\n    });\n};\n\n// Add external link icons\nconst initExternalLinkIcons = () => {\n    const links = document.querySelectorAll('a[target=\"_blank\"]:not(.has-external-icon)');\n    const themeUrl = window.themeUrl || '';\n\n    links.forEach(link => {\n        // Create <span> element for the icon\n        const icon = document.createElement('span');\n        icon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"external-link-icon\">\n            <path d=\"M13 3L3 13M13 3H4M13 3V12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>`;\n\n        // Append icon and mark as processed\n        link.appendChild(icon);\n        link.classList.add('has-external-icon');\n    });\n};\n\n// Tardis icon scroll progress\nconst initTardisScrollProgress = () => {\n    const container = document.querySelector('.tardis-progress-container');\n    const fillRect = document.getElementById('tardis-fill');\n    const statusText = document.getElementById('tardisProgressStatus');\n    const featuredImage = document.querySelector('.post-featured-image');\n    const article = document.querySelector('.single-post-article');\n    const comments = document.querySelector('#comments');\n\n    if (!container || !fillRect || !statusText || !article) return;\n\n    const showAfter = featuredImage?.offsetHeight || 600;\n    const fillHeight = 864; // Match SVG height\n    let ticking = false;\n\n    const updateProgress = () => {\n        const scrollY = window.scrollY || window.pageYOffset;\n        \n        // Calculate article end position\n        const articleEnd = article.offsetTop + article.offsetHeight;\n        const viewportHeight = window.innerHeight;\n        const scrollDistance = articleEnd - viewportHeight;\n        \n        // Add offset to ensure fill completes exactly at article end\n        const progress = Math.min(scrollY / (scrollDistance + 100), 1);\n        const percent = Math.round(progress * 100);\n\n        // Show/hide logic\n        if (scrollY > showAfter && scrollY < (scrollDistance + viewportHeight + -600)) {\n            container.classList.add('visible');\n        } else {\n            container.classList.remove('visible');\n        }\n\n        // Move the blue fill up\n        const translateY = fillHeight * (1 - progress);\n        fillRect.setAttribute('y', translateY);\n\n        // Update screen reader text\n        statusText.textContent = `Reading progress: ${percent}%`;\n\n        ticking = false;\n    };\n\n    const onScroll = () => {\n        if (!ticking) {\n            requestAnimationFrame(updateProgress);\n            ticking = true;\n        }\n    };\n\n    window.addEventListener('scroll', onScroll, { passive: true });\n    window.addEventListener('resize', onScroll, { passive: true });\n    updateProgress(); // initial state\n};\n\n// Initialize all features\nconst init = () => {\n    initNavigation();\n    initBackgroundFade();\n    initSearch();\n    initPodcastMenu();\n    initScrollContainers();\n    initExternalLinkIcons();\n    initTardisScrollProgress();\n};\n\n// Start when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n} else {\n    init();\n}"]}